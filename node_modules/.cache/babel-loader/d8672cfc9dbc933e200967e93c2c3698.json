{"ast":null,"code":"/**\r\n * Copyright (c) 2015, Facebook, Inc.\r\n * All rights reserved.\r\n *\r\n * This source code is licensed under the BSD-style license found in the\r\n * LICENSE file in the root directory of this source tree. An additional grant\r\n * of patent rights can be found in the PATENTS file in the same directory.\r\n *\r\n * @providesModule normalizeWheel\r\n * @typechecks\r\n */\n'use strict';\n\nvar UserAgent_DEPRECATED = require('./UserAgent_DEPRECATED');\n\nvar isEventSupported = require('./isEventSupported'); // Reasonable defaults\n\n\nvar PIXEL_STEP = 10;\nvar LINE_HEIGHT = 40;\nvar PAGE_HEIGHT = 800;\n/**\r\n * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is\r\n * complicated, thus this doc is long and (hopefully) detailed enough to answer\r\n * your questions.\r\n *\r\n * If you need to react to the mouse wheel in a predictable way, this code is\r\n * like your bestest friend. * hugs *\r\n *\r\n * As of today, there are 4 DOM event types you can listen to:\r\n *\r\n *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)\r\n *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari\r\n *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!\r\n *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003\r\n *\r\n * So what to do?  The is the best:\r\n *\r\n *   normalizeWheel.getEventType();\r\n *\r\n * In your event callback, use this code to get sane interpretation of the\r\n * deltas.  This code will return an object with properties:\r\n *\r\n *   spinX   -- normalized spin speed (use for zoom) - x plane\r\n *   spinY   -- \" - y plane\r\n *   pixelX  -- normalized distance (to pixels) - x plane\r\n *   pixelY  -- \" - y plane\r\n *\r\n * Wheel values are provided by the browser assuming you are using the wheel to\r\n * scroll a web page by a number of lines or pixels (or pages).  Values can vary\r\n * significantly on different platforms and browsers, forgetting that you can\r\n * scroll at different speeds.  Some devices (like trackpads) emit more events\r\n * at smaller increments with fine granularity, and some emit massive jumps with\r\n * linear speed or acceleration.\r\n *\r\n * This code does its best to normalize the deltas for you:\r\n *\r\n *   - spin is trying to normalize how far the wheel was spun (or trackpad\r\n *     dragged).  This is super useful for zoom support where you want to\r\n *     throw away the chunky scroll steps on the PC and make those equal to\r\n *     the slow and smooth tiny steps on the Mac. Key data: This code tries to\r\n *     resolve a single slow step on a wheel to 1.\r\n *\r\n *   - pixel is normalizing the desired scroll delta in pixel units.  You'll\r\n *     get the crazy differences between browsers, but at least it'll be in\r\n *     pixels!\r\n *\r\n *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This\r\n *     should translate to positive value zooming IN, negative zooming OUT.\r\n *     This matches the newer 'wheel' event.\r\n *\r\n * Why are there spinX, spinY (or pixels)?\r\n *\r\n *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn\r\n *     with a mouse.  It results in side-scrolling in the browser by default.\r\n *\r\n *   - spinY is what you expect -- it's the classic axis of a mouse wheel.\r\n *\r\n *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and\r\n *     probably is by browsers in conjunction with fancy 3D controllers .. but\r\n *     you know.\r\n *\r\n * Implementation info:\r\n *\r\n * Examples of 'wheel' event if you scroll slowly (down) by one step with an\r\n * average mouse:\r\n *\r\n *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)\r\n *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)\r\n *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)\r\n *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)\r\n *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)\r\n *\r\n * On the trackpad:\r\n *\r\n *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)\r\n *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)\r\n *\r\n * On other/older browsers.. it's more complicated as there can be multiple and\r\n * also missing delta values.\r\n *\r\n * The 'wheel' event is more standard:\r\n *\r\n * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents\r\n *\r\n * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and\r\n * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain\r\n * backward compatibility with older events.  Those other values help us\r\n * better normalize spin speed.  Example of what the browsers provide:\r\n *\r\n *                          | event.wheelDelta | event.detail\r\n *        ------------------+------------------+--------------\r\n *          Safari v5/OS X  |       -120       |       0\r\n *          Safari v5/Win7  |       -120       |       0\r\n *         Chrome v17/OS X  |       -120       |       0\r\n *         Chrome v17/Win7  |       -120       |       0\r\n *                IE9/Win7  |       -120       |   undefined\r\n *         Firefox v4/OS X  |     undefined    |       1\r\n *         Firefox v4/Win7  |     undefined    |       3\r\n *\r\n */\n\nfunction normalizeWheel(\n/*object*/\nevent)\n/*object*/\n{\n  var sX = 0,\n      sY = 0,\n      // spinX, spinY\n  pX = 0,\n      pY = 0; // pixelX, pixelY\n  // Legacy\n\n  if ('detail' in event) {\n    sY = event.detail;\n  }\n\n  if ('wheelDelta' in event) {\n    sY = -event.wheelDelta / 120;\n  }\n\n  if ('wheelDeltaY' in event) {\n    sY = -event.wheelDeltaY / 120;\n  }\n\n  if ('wheelDeltaX' in event) {\n    sX = -event.wheelDeltaX / 120;\n  } // side scrolling on FF with DOMMouseScroll\n\n\n  if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {\n    sX = sY;\n    sY = 0;\n  }\n\n  pX = sX * PIXEL_STEP;\n  pY = sY * PIXEL_STEP;\n\n  if ('deltaY' in event) {\n    pY = event.deltaY;\n  }\n\n  if ('deltaX' in event) {\n    pX = event.deltaX;\n  }\n\n  if ((pX || pY) && event.deltaMode) {\n    if (event.deltaMode == 1) {\n      // delta in LINE units\n      pX *= LINE_HEIGHT;\n      pY *= LINE_HEIGHT;\n    } else {\n      // delta in PAGE units\n      pX *= PAGE_HEIGHT;\n      pY *= PAGE_HEIGHT;\n    }\n  } // Fall-back if spin cannot be determined\n\n\n  if (pX && !sX) {\n    sX = pX < 1 ? -1 : 1;\n  }\n\n  if (pY && !sY) {\n    sY = pY < 1 ? -1 : 1;\n  }\n\n  return {\n    spinX: sX,\n    spinY: sY,\n    pixelX: pX,\n    pixelY: pY\n  };\n}\n/**\r\n * The best combination if you prefer spinX + spinY normalization.  It favors\r\n * the older DOMMouseScroll for Firefox, as FF does not include wheelDelta with\r\n * 'wheel' event, making spin speed determination impossible.\r\n */\n\n\nnormalizeWheel.getEventType = function ()\n/*string*/\n{\n  return UserAgent_DEPRECATED.firefox() ? 'DOMMouseScroll' : isEventSupported('wheel') ? 'wheel' : 'mousewheel';\n};\n\nmodule.exports = normalizeWheel;","map":null,"metadata":{},"sourceType":"script"}