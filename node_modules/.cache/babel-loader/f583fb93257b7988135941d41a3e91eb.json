{"ast":null,"code":"require(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.replace.js\");\n\n/**\r\n * Copyright 2004-present Facebook. All Rights Reserved.\r\n *\r\n * @providesModule UserAgent_DEPRECATED\r\n */\n\n/**\r\n *  Provides entirely client-side User Agent and OS detection. You should prefer\r\n *  the non-deprecated UserAgent module when possible, which exposes our\r\n *  authoritative server-side PHP-based detection to the client.\r\n *\r\n *  Usage is straightforward:\r\n *\r\n *    if (UserAgent_DEPRECATED.ie()) {\r\n *      //  IE\r\n *    }\r\n *\r\n *  You can also do version checks:\r\n *\r\n *    if (UserAgent_DEPRECATED.ie() >= 7) {\r\n *      //  IE7 or better\r\n *    }\r\n *\r\n *  The browser functions will return NaN if the browser does not match, so\r\n *  you can also do version compares the other way:\r\n *\r\n *    if (UserAgent_DEPRECATED.ie() < 7) {\r\n *      //  IE6 or worse\r\n *    }\r\n *\r\n *  Note that the version is a float and may include a minor version number,\r\n *  so you should always use range operators to perform comparisons, not\r\n *  strict equality.\r\n *\r\n *  **Note:** You should **strongly** prefer capability detection to browser\r\n *  version detection where it's reasonable:\r\n *\r\n *    http://www.quirksmode.org/js/support.html\r\n *\r\n *  Further, we have a large number of mature wrapper functions and classes\r\n *  which abstract away many browser irregularities. Check the documentation,\r\n *  grep for things, or ask on javascript@lists.facebook.com before writing yet\r\n *  another copy of \"event || window.event\".\r\n *\r\n */\nvar _populated = false; // Browsers\n\nvar _ie, _firefox, _opera, _webkit, _chrome; // Actual IE browser for compatibility mode\n\n\nvar _ie_real_version; // Platforms\n\n\nvar _osx, _windows, _linux, _android; // Architectures\n\n\nvar _win64; // Devices\n\n\nvar _iphone, _ipad, _native;\n\nvar _mobile;\n\nfunction _populate() {\n  if (_populated) {\n    return;\n  }\n\n  _populated = true; // To work around buggy JS libraries that can't handle multi-digit\n  // version numbers, Opera 10's user agent string claims it's Opera\n  // 9, then later includes a Version/X.Y field:\n  //\n  // Opera/9.80 (foo) Presto/2.2.15 Version/10.10\n\n  var uas = navigator.userAgent;\n  var agent = /(?:MSIE.(\\d+\\.\\d+))|(?:(?:Firefox|GranParadiso|Iceweasel).(\\d+\\.\\d+))|(?:Opera(?:.+Version.|.)(\\d+\\.\\d+))|(?:AppleWebKit.(\\d+(?:\\.\\d+)?))|(?:Trident\\/\\d+\\.\\d+.*rv:(\\d+\\.\\d+))/.exec(uas);\n  var os = /(Mac OS X)|(Windows)|(Linux)/.exec(uas);\n  _iphone = /\\b(iPhone|iP[ao]d)/.exec(uas);\n  _ipad = /\\b(iP[ao]d)/.exec(uas);\n  _android = /Android/i.exec(uas);\n  _native = /FBAN\\/\\w+;/i.exec(uas);\n  _mobile = /Mobile/i.exec(uas); // Note that the IE team blog would have you believe you should be checking\n  // for 'Win64; x64'.  But MSDN then reveals that you can actually be coming\n  // from either x64 or ia64;  so ultimately, you should just check for Win64\n  // as in indicator of whether you're in 64-bit IE.  32-bit IE on 64-bit\n  // Windows will send 'WOW64' instead.\n\n  _win64 = !!/Win64/.exec(uas);\n\n  if (agent) {\n    _ie = agent[1] ? parseFloat(agent[1]) : agent[5] ? parseFloat(agent[5]) : NaN; // IE compatibility mode\n\n    if (_ie && document && document.documentMode) {\n      _ie = document.documentMode;\n    } // grab the \"true\" ie version from the trident token if available\n\n\n    var trident = /(?:Trident\\/(\\d+.\\d+))/.exec(uas);\n    _ie_real_version = trident ? parseFloat(trident[1]) + 4 : _ie;\n    _firefox = agent[2] ? parseFloat(agent[2]) : NaN;\n    _opera = agent[3] ? parseFloat(agent[3]) : NaN;\n    _webkit = agent[4] ? parseFloat(agent[4]) : NaN;\n\n    if (_webkit) {\n      // We do not add the regexp to the above test, because it will always\n      // match 'safari' only since 'AppleWebKit' appears before 'Chrome' in\n      // the userAgent string.\n      agent = /(?:Chrome\\/(\\d+\\.\\d+))/.exec(uas);\n      _chrome = agent && agent[1] ? parseFloat(agent[1]) : NaN;\n    } else {\n      _chrome = NaN;\n    }\n  } else {\n    _ie = _firefox = _opera = _chrome = _webkit = NaN;\n  }\n\n  if (os) {\n    if (os[1]) {\n      // Detect OS X version.  If no version number matches, set _osx to true.\n      // Version examples:  10, 10_6_1, 10.7\n      // Parses version number as a float, taking only first two sets of\n      // digits.  If only one set of digits is found, returns just the major\n      // version number.\n      var ver = /(?:Mac OS X (\\d+(?:[._]\\d+)?))/.exec(uas);\n      _osx = ver ? parseFloat(ver[1].replace('_', '.')) : true;\n    } else {\n      _osx = false;\n    }\n\n    _windows = !!os[2];\n    _linux = !!os[3];\n  } else {\n    _osx = _windows = _linux = false;\n  }\n}\n\nvar UserAgent_DEPRECATED = {\n  /**\r\n   *  Check if the UA is Internet Explorer.\r\n   *\r\n   *\r\n   *  @return float|NaN Version number (if match) or NaN.\r\n   */\n  ie: function ie() {\n    return _populate() || _ie;\n  },\n\n  /**\r\n   * Check if we're in Internet Explorer compatibility mode.\r\n   *\r\n   * @return bool true if in compatibility mode, false if\r\n   * not compatibility mode or not ie\r\n   */\n  ieCompatibilityMode: function ieCompatibilityMode() {\n    return _populate() || _ie_real_version > _ie;\n  },\n\n  /**\r\n   * Whether the browser is 64-bit IE.  Really, this is kind of weak sauce;  we\r\n   * only need this because Skype can't handle 64-bit IE yet.  We need to remove\r\n   * this when we don't need it -- tracked by #601957.\r\n   */\n  ie64: function ie64() {\n    return UserAgent_DEPRECATED.ie() && _win64;\n  },\n\n  /**\r\n   *  Check if the UA is Firefox.\r\n   *\r\n   *\r\n   *  @return float|NaN Version number (if match) or NaN.\r\n   */\n  firefox: function firefox() {\n    return _populate() || _firefox;\n  },\n\n  /**\r\n   *  Check if the UA is Opera.\r\n   *\r\n   *\r\n   *  @return float|NaN Version number (if match) or NaN.\r\n   */\n  opera: function opera() {\n    return _populate() || _opera;\n  },\n\n  /**\r\n   *  Check if the UA is WebKit.\r\n   *\r\n   *\r\n   *  @return float|NaN Version number (if match) or NaN.\r\n   */\n  webkit: function webkit() {\n    return _populate() || _webkit;\n  },\n\n  /**\r\n   *  For Push\r\n   *  WILL BE REMOVED VERY SOON. Use UserAgent_DEPRECATED.webkit\r\n   */\n  safari: function safari() {\n    return UserAgent_DEPRECATED.webkit();\n  },\n\n  /**\r\n   *  Check if the UA is a Chrome browser.\r\n   *\r\n   *\r\n   *  @return float|NaN Version number (if match) or NaN.\r\n   */\n  chrome: function chrome() {\n    return _populate() || _chrome;\n  },\n\n  /**\r\n   *  Check if the user is running Windows.\r\n   *\r\n   *  @return bool `true' if the user's OS is Windows.\r\n   */\n  windows: function windows() {\n    return _populate() || _windows;\n  },\n\n  /**\r\n   *  Check if the user is running Mac OS X.\r\n   *\r\n   *  @return float|bool   Returns a float if a version number is detected,\r\n   *                       otherwise true/false.\r\n   */\n  osx: function osx() {\n    return _populate() || _osx;\n  },\n\n  /**\r\n   * Check if the user is running Linux.\r\n   *\r\n   * @return bool `true' if the user's OS is some flavor of Linux.\r\n   */\n  linux: function linux() {\n    return _populate() || _linux;\n  },\n\n  /**\r\n   * Check if the user is running on an iPhone or iPod platform.\r\n   *\r\n   * @return bool `true' if the user is running some flavor of the\r\n   *    iPhone OS.\r\n   */\n  iphone: function iphone() {\n    return _populate() || _iphone;\n  },\n  mobile: function mobile() {\n    return _populate() || _iphone || _ipad || _android || _mobile;\n  },\n  nativeApp: function nativeApp() {\n    // webviews inside of the native apps\n    return _populate() || _native;\n  },\n  android: function android() {\n    return _populate() || _android;\n  },\n  ipad: function ipad() {\n    return _populate() || _ipad;\n  }\n};\nmodule.exports = UserAgent_DEPRECATED;","map":null,"metadata":{},"sourceType":"script"}